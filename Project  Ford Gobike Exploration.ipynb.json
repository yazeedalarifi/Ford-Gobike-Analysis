{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Ford Gobike Exploration\n",
    "\n",
    "\n",
    "# Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "public bike share (PBS) scheme ، It is the one of the services that allows the shared use of bicycles for a low price or for free ، One of the advantages of this system is that it allows people to borrow a bike from one dock and return it to another dock ، The Docks are equipped with a system to lock and on lock the bicycles by computer control ، The person enters the payment method ، Then the computer opens the lock to return the bike .\n",
    "\n",
    "In this project we will perform an exploratory analysis of data provided by Ford GoBike, a bike-share system provider."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Wrangling\n",
    "\n",
    "\n",
    "Ford GoBike It is a local bike-sharing system in San Francisco , In this dataset we have information about , individual bicycle rides made in a bike-sharing system and, the dataset which will be explored from june 2017 to december 2018."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sb\n",
    "from pandas import Series, DataFrame\n",
    "import requests\n",
    "import os\n",
    "import csv \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# in this step we download 2017 data \n",
    "file = '2017_fordgobike.csv'\n",
    "if not os.path.exists(file):\n",
    "    url = 'https://s3.amazonaws.com/fordgobike-data/2017-fordgobike-tripdata.csv'\n",
    "    r = requests.get(url)\n",
    "\n",
    "    if r.status_code == 200:\n",
    "        with open(file, 'wb') as outfile:\n",
    "            outfile.write(r.content)\n",
    "    else:\n",
    "        print(url,' not found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# in this step we download 2017 data \n",
    "\n",
    "for i in range(12):\n",
    "    month = '%02d' % (i+1)\n",
    "    file = '2018_' + month + '_fordgobike.zip'\n",
    "    if not os.path.exists(file):\n",
    "        url = 'https://s3.amazonaws.com/fordgobike-data/2018' + month + '-fordgobike-tripdata.csv.zip'\n",
    "        r = requests.get(url)\n",
    "\n",
    "        if r.status_code == 200:\n",
    "            with open(file, 'wb') as outfile:\n",
    "                outfile.write(r.content)\n",
    "        else:\n",
    "            print(url,' not found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# in this step we loading 2017 data\n",
    "data_2017 = pd.read_csv('2017_fordgobike.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>member_birth_year</th>\n",
       "      <th>member_gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80110</td>\n",
       "      <td>2017-12-31 16:57:39.6540</td>\n",
       "      <td>2018-01-01 15:12:50.2450</td>\n",
       "      <td>74</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>43</td>\n",
       "      <td>San Francisco Public Library (Grove St at Hyde...</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>-122.415929</td>\n",
       "      <td>96</td>\n",
       "      <td>Customer</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78800</td>\n",
       "      <td>2017-12-31 15:56:34.8420</td>\n",
       "      <td>2018-01-01 13:49:55.6170</td>\n",
       "      <td>284</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>96</td>\n",
       "      <td>Dolores St at 15th St</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>-122.426614</td>\n",
       "      <td>88</td>\n",
       "      <td>Customer</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45768</td>\n",
       "      <td>2017-12-31 22:45:48.4110</td>\n",
       "      <td>2018-01-01 11:28:36.8830</td>\n",
       "      <td>245</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>245</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>1094</td>\n",
       "      <td>Customer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62172</td>\n",
       "      <td>2017-12-31 17:31:10.6360</td>\n",
       "      <td>2018-01-01 10:47:23.5310</td>\n",
       "      <td>60</td>\n",
       "      <td>8th St at Ringold St</td>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>5</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>2831</td>\n",
       "      <td>Customer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>43603</td>\n",
       "      <td>2017-12-31 14:23:14.0010</td>\n",
       "      <td>2018-01-01 02:29:57.5710</td>\n",
       "      <td>239</td>\n",
       "      <td>Bancroft Way at Telegraph Ave</td>\n",
       "      <td>37.868813</td>\n",
       "      <td>-122.258764</td>\n",
       "      <td>247</td>\n",
       "      <td>Fulton St at Bancroft Way</td>\n",
       "      <td>37.867789</td>\n",
       "      <td>-122.265896</td>\n",
       "      <td>3167</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration_sec                start_time                  end_time  \\\n",
       "0         80110  2017-12-31 16:57:39.6540  2018-01-01 15:12:50.2450   \n",
       "1         78800  2017-12-31 15:56:34.8420  2018-01-01 13:49:55.6170   \n",
       "2         45768  2017-12-31 22:45:48.4110  2018-01-01 11:28:36.8830   \n",
       "3         62172  2017-12-31 17:31:10.6360  2018-01-01 10:47:23.5310   \n",
       "4         43603  2017-12-31 14:23:14.0010  2018-01-01 02:29:57.5710   \n",
       "\n",
       "   start_station_id                                 start_station_name  \\\n",
       "0                74                              Laguna St at Hayes St   \n",
       "1               284  Yerba Buena Center for the Arts (Howard St at ...   \n",
       "2               245                             Downtown Berkeley BART   \n",
       "3                60                               8th St at Ringold St   \n",
       "4               239                      Bancroft Way at Telegraph Ave   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               37.776435              -122.426244              43   \n",
       "1               37.784872              -122.400876              96   \n",
       "2               37.870348              -122.267764             245   \n",
       "3               37.774520              -122.409449               5   \n",
       "4               37.868813              -122.258764             247   \n",
       "\n",
       "                                    end_station_name  end_station_latitude  \\\n",
       "0  San Francisco Public Library (Grove St at Hyde...             37.778768   \n",
       "1                              Dolores St at 15th St             37.766210   \n",
       "2                             Downtown Berkeley BART             37.870348   \n",
       "3       Powell St BART Station (Market St at 5th St)             37.783899   \n",
       "4                          Fulton St at Bancroft Way             37.867789   \n",
       "\n",
       "   end_station_longitude  bike_id   user_type  member_birth_year member_gender  \n",
       "0            -122.415929       96    Customer             1987.0          Male  \n",
       "1            -122.426614       88    Customer             1965.0        Female  \n",
       "2            -122.267764     1094    Customer                NaN           NaN  \n",
       "3            -122.408445     2831    Customer                NaN           NaN  \n",
       "4            -122.265896     3167  Subscriber             1997.0        Female  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2017.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 519700 entries, 0 to 519699\n",
      "Data columns (total 15 columns):\n",
      " #   Column                   Non-Null Count   Dtype  \n",
      "---  ------                   --------------   -----  \n",
      " 0   duration_sec             519700 non-null  int64  \n",
      " 1   start_time               519700 non-null  object \n",
      " 2   end_time                 519700 non-null  object \n",
      " 3   start_station_id         519700 non-null  int64  \n",
      " 4   start_station_name       519700 non-null  object \n",
      " 5   start_station_latitude   519700 non-null  float64\n",
      " 6   start_station_longitude  519700 non-null  float64\n",
      " 7   end_station_id           519700 non-null  int64  \n",
      " 8   end_station_name         519700 non-null  object \n",
      " 9   end_station_latitude     519700 non-null  float64\n",
      " 10  end_station_longitude    519700 non-null  float64\n",
      " 11  bike_id                  519700 non-null  int64  \n",
      " 12  user_type                519700 non-null  object \n",
      " 13  member_birth_year        453159 non-null  float64\n",
      " 14  member_gender            453238 non-null  object \n",
      "dtypes: float64(5), int64(4), object(6)\n",
      "memory usage: 59.5+ MB\n"
     ]
    }
   ],
   "source": [
    "# in this step we get general info Data_2017\n",
    "data_2017.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(519700, 15)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# in this step we Get overview 2017 Data\n",
    "data_2017.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>member_birth_year</th>\n",
       "      <th>member_gender</th>\n",
       "      <th>bike_share_for_all_trip</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75284</td>\n",
       "      <td>2018-01-31 22:52:35.2390</td>\n",
       "      <td>2018-02-01 19:47:19.8240</td>\n",
       "      <td>120</td>\n",
       "      <td>Mission Dolores Park</td>\n",
       "      <td>37.761420</td>\n",
       "      <td>-122.426435</td>\n",
       "      <td>285</td>\n",
       "      <td>Webster St at O'Farrell St</td>\n",
       "      <td>37.783521</td>\n",
       "      <td>-122.431158</td>\n",
       "      <td>2765</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>85422</td>\n",
       "      <td>2018-01-31 16:13:34.3510</td>\n",
       "      <td>2018-02-01 15:57:17.3100</td>\n",
       "      <td>15</td>\n",
       "      <td>San Francisco Ferry Building (Harry Bridges Pl...</td>\n",
       "      <td>37.795392</td>\n",
       "      <td>-122.394203</td>\n",
       "      <td>15</td>\n",
       "      <td>San Francisco Ferry Building (Harry Bridges Pl...</td>\n",
       "      <td>37.795392</td>\n",
       "      <td>-122.394203</td>\n",
       "      <td>2815</td>\n",
       "      <td>Customer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>71576</td>\n",
       "      <td>2018-01-31 14:23:55.8890</td>\n",
       "      <td>2018-02-01 10:16:52.1160</td>\n",
       "      <td>304</td>\n",
       "      <td>Jackson St at 5th St</td>\n",
       "      <td>37.348759</td>\n",
       "      <td>-121.894798</td>\n",
       "      <td>296</td>\n",
       "      <td>5th St at Virginia St</td>\n",
       "      <td>37.325998</td>\n",
       "      <td>-121.877120</td>\n",
       "      <td>3039</td>\n",
       "      <td>Customer</td>\n",
       "      <td>1996.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>61076</td>\n",
       "      <td>2018-01-31 14:53:23.5620</td>\n",
       "      <td>2018-02-01 07:51:20.5000</td>\n",
       "      <td>75</td>\n",
       "      <td>Market St at Franklin St</td>\n",
       "      <td>37.773793</td>\n",
       "      <td>-122.421239</td>\n",
       "      <td>47</td>\n",
       "      <td>4th St at Harrison St</td>\n",
       "      <td>37.780955</td>\n",
       "      <td>-122.399749</td>\n",
       "      <td>321</td>\n",
       "      <td>Customer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39966</td>\n",
       "      <td>2018-01-31 19:52:24.6670</td>\n",
       "      <td>2018-02-01 06:58:31.0530</td>\n",
       "      <td>74</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>19</td>\n",
       "      <td>Post St at Kearny St</td>\n",
       "      <td>37.788975</td>\n",
       "      <td>-122.403452</td>\n",
       "      <td>617</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration_sec                start_time                  end_time  \\\n",
       "0         75284  2018-01-31 22:52:35.2390  2018-02-01 19:47:19.8240   \n",
       "1         85422  2018-01-31 16:13:34.3510  2018-02-01 15:57:17.3100   \n",
       "2         71576  2018-01-31 14:23:55.8890  2018-02-01 10:16:52.1160   \n",
       "3         61076  2018-01-31 14:53:23.5620  2018-02-01 07:51:20.5000   \n",
       "4         39966  2018-01-31 19:52:24.6670  2018-02-01 06:58:31.0530   \n",
       "\n",
       "   start_station_id                                 start_station_name  \\\n",
       "0               120                               Mission Dolores Park   \n",
       "1                15  San Francisco Ferry Building (Harry Bridges Pl...   \n",
       "2               304                               Jackson St at 5th St   \n",
       "3                75                           Market St at Franklin St   \n",
       "4                74                              Laguna St at Hayes St   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               37.761420              -122.426435             285   \n",
       "1               37.795392              -122.394203              15   \n",
       "2               37.348759              -121.894798             296   \n",
       "3               37.773793              -122.421239              47   \n",
       "4               37.776435              -122.426244              19   \n",
       "\n",
       "                                    end_station_name  end_station_latitude  \\\n",
       "0                         Webster St at O'Farrell St             37.783521   \n",
       "1  San Francisco Ferry Building (Harry Bridges Pl...             37.795392   \n",
       "2                              5th St at Virginia St             37.325998   \n",
       "3                              4th St at Harrison St             37.780955   \n",
       "4                               Post St at Kearny St             37.788975   \n",
       "\n",
       "   end_station_longitude  bike_id   user_type  member_birth_year  \\\n",
       "0            -122.431158     2765  Subscriber             1986.0   \n",
       "1            -122.394203     2815    Customer                NaN   \n",
       "2            -121.877120     3039    Customer             1996.0   \n",
       "3            -122.399749      321    Customer                NaN   \n",
       "4            -122.403452      617  Subscriber             1991.0   \n",
       "\n",
       "  member_gender bike_share_for_all_trip  \n",
       "0          Male                      No  \n",
       "1           NaN                      No  \n",
       "2          Male                      No  \n",
       "3           NaN                      No  \n",
       "4          Male                      No  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# in this step we loading 2018 data to a dictionary It has data every month\n",
    "dictionary18 = {}\n",
    "for i in range(12):\n",
    "    month = '%02d' % (i+1)\n",
    "    file = '2018_' + month + '_fordgobike.zip'\n",
    "    if os.path.exists(file):\n",
    "        dictionary18[month] = pd.read_csv(file)\n",
    "\n",
    "dictionary18['01'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 94802 entries, 0 to 94801\n",
      "Data columns (total 16 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   duration_sec             94802 non-null  int64  \n",
      " 1   start_time               94802 non-null  object \n",
      " 2   end_time                 94802 non-null  object \n",
      " 3   start_station_id         94802 non-null  int64  \n",
      " 4   start_station_name       94802 non-null  object \n",
      " 5   start_station_latitude   94802 non-null  float64\n",
      " 6   start_station_longitude  94802 non-null  float64\n",
      " 7   end_station_id           94802 non-null  int64  \n",
      " 8   end_station_name         94802 non-null  object \n",
      " 9   end_station_latitude     94802 non-null  float64\n",
      " 10  end_station_longitude    94802 non-null  float64\n",
      " 11  bike_id                  94802 non-null  int64  \n",
      " 12  user_type                94802 non-null  object \n",
      " 13  member_birth_year        86963 non-null  float64\n",
      " 14  member_gender            87001 non-null  object \n",
      " 15  bike_share_for_all_trip  94802 non-null  object \n",
      "dtypes: float64(5), int64(4), object(7)\n",
      "memory usage: 11.6+ MB\n"
     ]
    }
   ],
   "source": [
    "# in this step we get general info 2018 data\n",
    "dictionary18['01'].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(94802, 16)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# in this step we Get overview 2018 Data\n",
    "dictionary18['01'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# collecting monthly dataframes to one dataset\n",
    "list18 = []\n",
    "for i in range(12):\n",
    "    month = '%02d' % (i+1)\n",
    "    file = '2018_' + month + '_fordgobike.zip'\n",
    "    if os.path.exists(file):\n",
    "        list18.append(dictionary18[month])\n",
    "        \n",
    "data_2018 = pd.concat(list18, ignore_index = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1863721 entries, 0 to 1863720\n",
      "Data columns (total 16 columns):\n",
      " #   Column                   Dtype  \n",
      "---  ------                   -----  \n",
      " 0   duration_sec             int64  \n",
      " 1   start_time               object \n",
      " 2   end_time                 object \n",
      " 3   start_station_id         float64\n",
      " 4   start_station_name       object \n",
      " 5   start_station_latitude   float64\n",
      " 6   start_station_longitude  float64\n",
      " 7   end_station_id           float64\n",
      " 8   end_station_name         object \n",
      " 9   end_station_latitude     float64\n",
      " 10  end_station_longitude    float64\n",
      " 11  bike_id                  int64  \n",
      " 12  user_type                object \n",
      " 13  member_birth_year        float64\n",
      " 14  member_gender            object \n",
      " 15  bike_share_for_all_trip  object \n",
      "dtypes: float64(7), int64(2), object(7)\n",
      "memory usage: 227.5+ MB\n"
     ]
    }
   ],
   "source": [
    "data_2018.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['duration_sec', 'start_time', 'end_time', 'start_station_id',\n",
       "       'start_station_name', 'start_station_latitude',\n",
       "       'start_station_longitude', 'end_station_id', 'end_station_name',\n",
       "       'end_station_latitude', 'end_station_longitude', 'bike_id', 'user_type',\n",
       "       'member_birth_year', 'member_gender', 'bike_share_for_all_trip'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_2018.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# we go to reomve \"bike_share_for_all_trip\" column\n",
    "data_2018 = data_2018.drop(['bike_share_for_all_trip'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#concat the df 17 and the df 18\n",
    "df1718 = pd.concat([data_2017, data_2018], ignore_index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>member_birth_year</th>\n",
       "      <th>member_gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>80110</td>\n",
       "      <td>2017-12-31 16:57:39.6540</td>\n",
       "      <td>2018-01-01 15:12:50.2450</td>\n",
       "      <td>74.0</td>\n",
       "      <td>Laguna St at Hayes St</td>\n",
       "      <td>37.776435</td>\n",
       "      <td>-122.426244</td>\n",
       "      <td>43.0</td>\n",
       "      <td>San Francisco Public Library (Grove St at Hyde...</td>\n",
       "      <td>37.778768</td>\n",
       "      <td>-122.415929</td>\n",
       "      <td>96</td>\n",
       "      <td>Customer</td>\n",
       "      <td>1987.0</td>\n",
       "      <td>Male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>78800</td>\n",
       "      <td>2017-12-31 15:56:34.8420</td>\n",
       "      <td>2018-01-01 13:49:55.6170</td>\n",
       "      <td>284.0</td>\n",
       "      <td>Yerba Buena Center for the Arts (Howard St at ...</td>\n",
       "      <td>37.784872</td>\n",
       "      <td>-122.400876</td>\n",
       "      <td>96.0</td>\n",
       "      <td>Dolores St at 15th St</td>\n",
       "      <td>37.766210</td>\n",
       "      <td>-122.426614</td>\n",
       "      <td>88</td>\n",
       "      <td>Customer</td>\n",
       "      <td>1965.0</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45768</td>\n",
       "      <td>2017-12-31 22:45:48.4110</td>\n",
       "      <td>2018-01-01 11:28:36.8830</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>245.0</td>\n",
       "      <td>Downtown Berkeley BART</td>\n",
       "      <td>37.870348</td>\n",
       "      <td>-122.267764</td>\n",
       "      <td>1094</td>\n",
       "      <td>Customer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62172</td>\n",
       "      <td>2017-12-31 17:31:10.6360</td>\n",
       "      <td>2018-01-01 10:47:23.5310</td>\n",
       "      <td>60.0</td>\n",
       "      <td>8th St at Ringold St</td>\n",
       "      <td>37.774520</td>\n",
       "      <td>-122.409449</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.783899</td>\n",
       "      <td>-122.408445</td>\n",
       "      <td>2831</td>\n",
       "      <td>Customer</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>43603</td>\n",
       "      <td>2017-12-31 14:23:14.0010</td>\n",
       "      <td>2018-01-01 02:29:57.5710</td>\n",
       "      <td>239.0</td>\n",
       "      <td>Bancroft Way at Telegraph Ave</td>\n",
       "      <td>37.868813</td>\n",
       "      <td>-122.258764</td>\n",
       "      <td>247.0</td>\n",
       "      <td>Fulton St at Bancroft Way</td>\n",
       "      <td>37.867789</td>\n",
       "      <td>-122.265896</td>\n",
       "      <td>3167</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>Female</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   duration_sec                start_time                  end_time  \\\n",
       "0         80110  2017-12-31 16:57:39.6540  2018-01-01 15:12:50.2450   \n",
       "1         78800  2017-12-31 15:56:34.8420  2018-01-01 13:49:55.6170   \n",
       "2         45768  2017-12-31 22:45:48.4110  2018-01-01 11:28:36.8830   \n",
       "3         62172  2017-12-31 17:31:10.6360  2018-01-01 10:47:23.5310   \n",
       "4         43603  2017-12-31 14:23:14.0010  2018-01-01 02:29:57.5710   \n",
       "\n",
       "   start_station_id                                 start_station_name  \\\n",
       "0              74.0                              Laguna St at Hayes St   \n",
       "1             284.0  Yerba Buena Center for the Arts (Howard St at ...   \n",
       "2             245.0                             Downtown Berkeley BART   \n",
       "3              60.0                               8th St at Ringold St   \n",
       "4             239.0                      Bancroft Way at Telegraph Ave   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               37.776435              -122.426244            43.0   \n",
       "1               37.784872              -122.400876            96.0   \n",
       "2               37.870348              -122.267764           245.0   \n",
       "3               37.774520              -122.409449             5.0   \n",
       "4               37.868813              -122.258764           247.0   \n",
       "\n",
       "                                    end_station_name  end_station_latitude  \\\n",
       "0  San Francisco Public Library (Grove St at Hyde...             37.778768   \n",
       "1                              Dolores St at 15th St             37.766210   \n",
       "2                             Downtown Berkeley BART             37.870348   \n",
       "3       Powell St BART Station (Market St at 5th St)             37.783899   \n",
       "4                          Fulton St at Bancroft Way             37.867789   \n",
       "\n",
       "   end_station_longitude  bike_id   user_type  member_birth_year member_gender  \n",
       "0            -122.415929       96    Customer             1987.0          Male  \n",
       "1            -122.426614       88    Customer             1965.0        Female  \n",
       "2            -122.267764     1094    Customer                NaN           NaN  \n",
       "3            -122.408445     2831    Customer                NaN           NaN  \n",
       "4            -122.265896     3167  Subscriber             1997.0        Female  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2383421 entries, 0 to 2383420\n",
      "Data columns (total 15 columns):\n",
      " #   Column                   Dtype  \n",
      "---  ------                   -----  \n",
      " 0   duration_sec             int64  \n",
      " 1   start_time               object \n",
      " 2   end_time                 object \n",
      " 3   start_station_id         float64\n",
      " 4   start_station_name       object \n",
      " 5   start_station_latitude   float64\n",
      " 6   start_station_longitude  float64\n",
      " 7   end_station_id           float64\n",
      " 8   end_station_name         object \n",
      " 9   end_station_latitude     float64\n",
      " 10  end_station_longitude    float64\n",
      " 11  bike_id                  int64  \n",
      " 12  user_type                object \n",
      " 13  member_birth_year        float64\n",
      " 14  member_gender            object \n",
      "dtypes: float64(7), int64(2), object(6)\n",
      "memory usage: 272.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df1718.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2017-06-28 09:47:36.3470'"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the early ride date in the dataset\n",
    "df1718['start_time'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2018-12-31 23:59:12.0970'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the last ride date in the dataset\n",
    "df1718['start_time'].max()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>member_birth_year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2383421.00</td>\n",
       "      <td>2371650.00</td>\n",
       "      <td>2383421.00</td>\n",
       "      <td>2383421.00</td>\n",
       "      <td>2371650.00</td>\n",
       "      <td>2383421.00</td>\n",
       "      <td>2383421.00</td>\n",
       "      <td>2383421.00</td>\n",
       "      <td>2206162.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>910.01</td>\n",
       "      <td>114.28</td>\n",
       "      <td>37.77</td>\n",
       "      <td>-122.35</td>\n",
       "      <td>112.48</td>\n",
       "      <td>37.77</td>\n",
       "      <td>-122.35</td>\n",
       "      <td>2160.72</td>\n",
       "      <td>1982.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2643.87</td>\n",
       "      <td>97.97</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.15</td>\n",
       "      <td>97.85</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.15</td>\n",
       "      <td>1252.54</td>\n",
       "      <td>10.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>61.00</td>\n",
       "      <td>3.00</td>\n",
       "      <td>37.26</td>\n",
       "      <td>-122.47</td>\n",
       "      <td>3.00</td>\n",
       "      <td>37.26</td>\n",
       "      <td>-122.47</td>\n",
       "      <td>10.00</td>\n",
       "      <td>1881.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>357.00</td>\n",
       "      <td>30.00</td>\n",
       "      <td>37.77</td>\n",
       "      <td>-122.41</td>\n",
       "      <td>29.00</td>\n",
       "      <td>37.77</td>\n",
       "      <td>-122.41</td>\n",
       "      <td>1119.00</td>\n",
       "      <td>1977.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>564.00</td>\n",
       "      <td>81.00</td>\n",
       "      <td>37.78</td>\n",
       "      <td>-122.40</td>\n",
       "      <td>81.00</td>\n",
       "      <td>37.78</td>\n",
       "      <td>-122.40</td>\n",
       "      <td>2173.00</td>\n",
       "      <td>1985.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>885.00</td>\n",
       "      <td>181.00</td>\n",
       "      <td>37.80</td>\n",
       "      <td>-122.29</td>\n",
       "      <td>180.00</td>\n",
       "      <td>37.80</td>\n",
       "      <td>-122.29</td>\n",
       "      <td>3116.00</td>\n",
       "      <td>1990.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>86369.00</td>\n",
       "      <td>381.00</td>\n",
       "      <td>45.51</td>\n",
       "      <td>-73.57</td>\n",
       "      <td>381.00</td>\n",
       "      <td>45.51</td>\n",
       "      <td>-73.57</td>\n",
       "      <td>6234.00</td>\n",
       "      <td>2000.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       duration_sec  start_station_id  start_station_latitude  \\\n",
       "count    2383421.00        2371650.00              2383421.00   \n",
       "mean         910.01            114.28                   37.77   \n",
       "std         2643.87             97.97                    0.10   \n",
       "min           61.00              3.00                   37.26   \n",
       "25%          357.00             30.00                   37.77   \n",
       "50%          564.00             81.00                   37.78   \n",
       "75%          885.00            181.00                   37.80   \n",
       "max        86369.00            381.00                   45.51   \n",
       "\n",
       "       start_station_longitude  end_station_id  end_station_latitude  \\\n",
       "count               2383421.00      2371650.00            2383421.00   \n",
       "mean                   -122.35          112.48                 37.77   \n",
       "std                       0.15           97.85                  0.10   \n",
       "min                    -122.47            3.00                 37.26   \n",
       "25%                    -122.41           29.00                 37.77   \n",
       "50%                    -122.40           81.00                 37.78   \n",
       "75%                    -122.29          180.00                 37.80   \n",
       "max                     -73.57          381.00                 45.51   \n",
       "\n",
       "       end_station_longitude    bike_id  member_birth_year  \n",
       "count             2383421.00 2383421.00         2206162.00  \n",
       "mean                 -122.35    2160.72            1982.54  \n",
       "std                     0.15    1252.54              10.51  \n",
       "min                  -122.47      10.00            1881.00  \n",
       "25%                  -122.41    1119.00            1977.00  \n",
       "50%                  -122.40    2173.00            1985.00  \n",
       "75%                  -122.29    3116.00            1990.00  \n",
       "max                   -73.57    6234.00            2000.00  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.float_format', lambda x: '%.2f' % x)\n",
    "df1718.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male      1636403\n",
       "Female     536809\n",
       "Other       33380\n",
       "Name: member_gender, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check gender value counts\n",
    "df1718['member_gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male      1636403\n",
       "Female     536809\n",
       "Other       33380\n",
       "Name: member_gender, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check Calculate the value of gender\n",
    "df1718['member_gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Subscriber    1992784\n",
       "Customer       390637\n",
       "Name: user_type, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check Calculate the value user type\n",
    "df1718['user_type'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### converting non-null values 'start_station_id' and 'end_station_id' to strings and \n",
    "#### converting \"bike_id\" from int to string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  in this step we converting non-null values to strings \n",
    "df1718['start_station_id'] =df1718['start_station_id'].where(df1718['start_station_id'].isnull(), df1718['start_station_id'].map(lambda x: '{:.0f}'.format(x)).astype(str))\n",
    "df1718['end_station_id'] = df1718['end_station_id'].where(df1718['end_station_id'].isnull(), df1718['end_station_id'].map(lambda x: '{:.0f}'.format(x)).astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# in this step we converting \"bike_id\" from int to string\n",
    "df1718['bike_id'] = df1718['bike_id'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "duration_sec                 int64\n",
       "start_time                  object\n",
       "end_time                    object\n",
       "start_station_id            object\n",
       "start_station_name          object\n",
       "start_station_latitude     float64\n",
       "start_station_longitude    float64\n",
       "end_station_id              object\n",
       "end_station_name            object\n",
       "end_station_latitude       float64\n",
       "end_station_longitude      float64\n",
       "bike_id                     object\n",
       "user_type                   object\n",
       "member_birth_year          float64\n",
       "member_gender               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "converting 'member_birth_year' from float64 to integer \n",
    "chek from converting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting\n",
    "df1718['member_birth_year'] = df1718['member_birth_year'].fillna(0).astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "duration_sec                 int64\n",
       "start_time                  object\n",
       "end_time                    object\n",
       "start_station_id            object\n",
       "start_station_name          object\n",
       "start_station_latitude     float64\n",
       "start_station_longitude    float64\n",
       "end_station_id              object\n",
       "end_station_name            object\n",
       "end_station_latitude       float64\n",
       "end_station_longitude      float64\n",
       "bike_id                     object\n",
       "user_type                   object\n",
       "member_birth_year            int64\n",
       "member_gender               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# chek\n",
    "df1718.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "converting 'start_time' and 'end_time' to datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting\n",
    "df1718['start_time'] = pd.to_datetime(df1718['start_time'])\n",
    "df1718['end_time'] = pd.to_datetime(df1718['end_time'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "duration_sec                        int64\n",
       "start_time                 datetime64[ns]\n",
       "end_time                   datetime64[ns]\n",
       "start_station_id                   object\n",
       "start_station_name                 object\n",
       "start_station_latitude            float64\n",
       "start_station_longitude           float64\n",
       "end_station_id                     object\n",
       "end_station_name                   object\n",
       "end_station_latitude              float64\n",
       "end_station_longitude             float64\n",
       "bike_id                            object\n",
       "user_type                          object\n",
       "member_birth_year                   int64\n",
       "member_gender                      object\n",
       "dtype: object"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can estimate a simple age by way of his year of birth and time of departure. Represent null ages due to missing birth year by 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1718.loc[df1718['member_birth_year'] == 0, 'Age'] = 0\n",
    "df1718.loc[df1718['member_birth_year'] > 0, 'Age'] = df1718['start_time'].dt.year - df1718['member_birth_year']\n",
    "df1718['Age'] = df1718['Age'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "duration_sec                        int64\n",
       "start_time                 datetime64[ns]\n",
       "end_time                   datetime64[ns]\n",
       "start_station_id                   object\n",
       "start_station_name                 object\n",
       "start_station_latitude            float64\n",
       "start_station_longitude           float64\n",
       "end_station_id                     object\n",
       "end_station_name                   object\n",
       "end_station_latitude              float64\n",
       "end_station_longitude             float64\n",
       "bike_id                            object\n",
       "user_type                          object\n",
       "member_birth_year                   int64\n",
       "member_gender                      object\n",
       "Age                                 int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     177259\n",
       "30    125329\n",
       "29    108440\n",
       "Name: Age, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718['Age'].value_counts().head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create new column 'duration_mins' & converting seconds to minutes \n",
    "df1718['duration_mins'] = df1718['duration_sec']/60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>member_birth_year</th>\n",
       "      <th>member_gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>duration_mins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>693734</th>\n",
       "      <td>393</td>\n",
       "      <td>2018-02-07 17:19:47.988</td>\n",
       "      <td>2018-02-07 17:26:21.015</td>\n",
       "      <td>20</td>\n",
       "      <td>Mechanics Monument Plaza (Market St at Bush St)</td>\n",
       "      <td>37.79</td>\n",
       "      <td>-122.40</td>\n",
       "      <td>5</td>\n",
       "      <td>Powell St BART Station (Market St at 5th St)</td>\n",
       "      <td>37.78</td>\n",
       "      <td>-122.41</td>\n",
       "      <td>136</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1997</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>6.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1698168</th>\n",
       "      <td>856</td>\n",
       "      <td>2018-08-06 14:17:02.943</td>\n",
       "      <td>2018-08-06 14:31:19.653</td>\n",
       "      <td>231</td>\n",
       "      <td>14th St at Filbert St</td>\n",
       "      <td>37.81</td>\n",
       "      <td>-122.28</td>\n",
       "      <td>182</td>\n",
       "      <td>19th Street BART Station</td>\n",
       "      <td>37.81</td>\n",
       "      <td>-122.27</td>\n",
       "      <td>1637</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>1982</td>\n",
       "      <td>Female</td>\n",
       "      <td>36</td>\n",
       "      <td>14.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208800</th>\n",
       "      <td>327</td>\n",
       "      <td>2017-10-24 17:46:16.932</td>\n",
       "      <td>2017-10-24 17:51:44.828</td>\n",
       "      <td>48</td>\n",
       "      <td>2nd St at S Park St</td>\n",
       "      <td>37.78</td>\n",
       "      <td>-122.39</td>\n",
       "      <td>321</td>\n",
       "      <td>5th at Folsom</td>\n",
       "      <td>37.78</td>\n",
       "      <td>-122.40</td>\n",
       "      <td>2276</td>\n",
       "      <td>Customer</td>\n",
       "      <td>1991</td>\n",
       "      <td>Male</td>\n",
       "      <td>26</td>\n",
       "      <td>5.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         duration_sec              start_time                end_time  \\\n",
       "693734            393 2018-02-07 17:19:47.988 2018-02-07 17:26:21.015   \n",
       "1698168           856 2018-08-06 14:17:02.943 2018-08-06 14:31:19.653   \n",
       "208800            327 2017-10-24 17:46:16.932 2017-10-24 17:51:44.828   \n",
       "\n",
       "        start_station_id                               start_station_name  \\\n",
       "693734                20  Mechanics Monument Plaza (Market St at Bush St)   \n",
       "1698168              231                            14th St at Filbert St   \n",
       "208800                48                              2nd St at S Park St   \n",
       "\n",
       "         start_station_latitude  start_station_longitude end_station_id  \\\n",
       "693734                    37.79                  -122.40              5   \n",
       "1698168                   37.81                  -122.28            182   \n",
       "208800                    37.78                  -122.39            321   \n",
       "\n",
       "                                     end_station_name  end_station_latitude  \\\n",
       "693734   Powell St BART Station (Market St at 5th St)                 37.78   \n",
       "1698168                      19th Street BART Station                 37.81   \n",
       "208800                                  5th at Folsom                 37.78   \n",
       "\n",
       "         end_station_longitude bike_id   user_type  member_birth_year  \\\n",
       "693734                 -122.41     136  Subscriber               1997   \n",
       "1698168                -122.27    1637  Subscriber               1982   \n",
       "208800                 -122.40    2276    Customer               1991   \n",
       "\n",
       "        member_gender  Age  duration_mins  \n",
       "693734           Male   21           6.55  \n",
       "1698168        Female   36          14.27  \n",
       "208800           Male   26           5.45  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1718.to_csv(\"fordgobike_combined.csv\", header=True, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2383421, 17)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1718.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2383421 entries, 0 to 2383420\n",
      "Data columns (total 17 columns):\n",
      " #   Column                   Dtype         \n",
      "---  ------                   -----         \n",
      " 0   duration_sec             int64         \n",
      " 1   start_time               datetime64[ns]\n",
      " 2   end_time                 datetime64[ns]\n",
      " 3   start_station_id         object        \n",
      " 4   start_station_name       object        \n",
      " 5   start_station_latitude   float64       \n",
      " 6   start_station_longitude  float64       \n",
      " 7   end_station_id           object        \n",
      " 8   end_station_name         object        \n",
      " 9   end_station_latitude     float64       \n",
      " 10  end_station_longitude    float64       \n",
      " 11  bike_id                  object        \n",
      " 12  user_type                object        \n",
      " 13  member_birth_year        int64         \n",
      " 14  member_gender            object        \n",
      " 15  Age                      int64         \n",
      " 16  duration_mins            float64       \n",
      "dtypes: datetime64[ns](2), float64(5), int64(3), object(7)\n",
      "memory usage: 309.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df1718.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What is the structure of your dataset?\n",
    "\n",
    "In the dataset we have data that contains (2383421 rows, 18 columns) ، Each row represents a bike ride / rental in the period of June 2017 to December 2018. ، The data type in the dataset is different ، The type is \"the String type\" contains  Station names, 'user_type', 'member_gender' . \n",
    "And we have \"integer data\" And it contains  \"member_birth_year\" and the trips duration and 'start_time' and 'end_time'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What is/are the main feature(s) of interest in your dataset?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Total number of rounds and duration \n",
    "\n",
    "Duration per trip.\n",
    "\n",
    "What kind of users are using the FordGoBike service more and less.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## What features in the dataset do you think will help support your investigation into your feature(s) of interest?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some information for data year of birth and gender, can give us insight into the number of users.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1718_copy = df1718.copy()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# default visualization of parameters.\n",
    "sb.set_style('darkgrid')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male     74.16\n",
       "Female   24.33\n",
       "Other     1.51\n",
       "Name: member_gender, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distribution of gender\n",
    "(df1718_copy.member_gender.value_counts(sort=True, normalize=True)*100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure(figsize=[10, 10])\n",
    "(df1718_copy.member_gender.value_counts(sort=True, normalize=True)*100).plot.bar(color = sb.color_palette()[2]);\n",
    "plt.title(\"the Rides per Gender\")\n",
    "plt.ylabel(\"the sum rides\")\n",
    "plt.xlabel(\"the Gender\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The result is that males make more trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Subscriber   83.61\n",
       "Customer     16.39\n",
       "Name: user_type, dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Distribution of users\n",
    "(df1718_copy.user_type.value_counts(sort=True, normalize=True)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10, 10])\n",
    "(df1718_copy.user_type.value_counts(sort=True, normalize=True)*100).plot.bar(color = sb.color_palette()[2])\n",
    "plt.title(\"the Rides per user type\")\n",
    "plt.ylabel(\"the sum rides\")\n",
    "plt.xlabel(\"the user type\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### th subscribers type  have most rides\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10, 10])\n",
    "df1718_age = df1718_copy.query('Age > 0')\n",
    "bins = np.arange(0, df1718_age['Age'].max()+2, 2)\n",
    "plt.hist(data = df1718_age, x = 'Age', bins = bins)\n",
    "plt.title(\"The Age distribution\")\n",
    "plt.xlabel('the Age')\n",
    "plt.ylabel('the Count The Trips');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_outliers_age_100 = df1718_copy[(df1718_copy.Age > 100)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "118    632\n",
       "107    262\n",
       "115    218\n",
       "116    173\n",
       "117    171\n",
       "130     23\n",
       "104     18\n",
       "114     12\n",
       "106     12\n",
       "110      7\n",
       "137      5\n",
       "109      4\n",
       "129      3\n",
       "131      2\n",
       "112      2\n",
       "Name: Age, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outliers_age_100.Age.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We separate the  ages(age <=100)\n",
    "df_valid = df1718_copy[(df1718_copy.Age <= 100)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:5303: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "# If at any age he has a mistake columns 'member_birth_year' and 'Age' to 0\n",
    "df_outliers_age_100.member_birth_year = 0\n",
    "df_outliers_age_100.Age = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>bike_id</th>\n",
       "      <th>user_type</th>\n",
       "      <th>member_birth_year</th>\n",
       "      <th>member_gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>duration_mins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>287</th>\n",
       "      <td>581</td>\n",
       "      <td>2017-12-31 18:10:46.556</td>\n",
       "      <td>2017-12-31 18:20:28.352</td>\n",
       "      <td>274</td>\n",
       "      <td>Oregon St at Adeline St</td>\n",
       "      <td>37.86</td>\n",
       "      <td>-122.27</td>\n",
       "      <td>173</td>\n",
       "      <td>Shattuck Ave at 55th Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.26</td>\n",
       "      <td>3050</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>9.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1751</th>\n",
       "      <td>370</td>\n",
       "      <td>2017-12-30 17:17:54.969</td>\n",
       "      <td>2017-12-30 17:24:05.481</td>\n",
       "      <td>207</td>\n",
       "      <td>Broadway at Coronado Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>173</td>\n",
       "      <td>Shattuck Ave at 55th Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.26</td>\n",
       "      <td>456</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>6.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3119</th>\n",
       "      <td>457</td>\n",
       "      <td>2017-12-29 18:24:08.722</td>\n",
       "      <td>2017-12-29 18:31:46.008</td>\n",
       "      <td>207</td>\n",
       "      <td>Broadway at Coronado Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>173</td>\n",
       "      <td>Shattuck Ave at 55th Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.26</td>\n",
       "      <td>1238</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>7.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3259</th>\n",
       "      <td>613</td>\n",
       "      <td>2017-12-29 17:20:22.096</td>\n",
       "      <td>2017-12-29 17:30:35.527</td>\n",
       "      <td>173</td>\n",
       "      <td>Shattuck Ave at 55th Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.26</td>\n",
       "      <td>207</td>\n",
       "      <td>Broadway at Coronado Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>1238</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>10.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5246</th>\n",
       "      <td>271</td>\n",
       "      <td>2017-12-28 16:48:41.310</td>\n",
       "      <td>2017-12-28 16:53:12.645</td>\n",
       "      <td>158</td>\n",
       "      <td>Shattuck Ave at Telegraph Ave</td>\n",
       "      <td>37.83</td>\n",
       "      <td>-122.26</td>\n",
       "      <td>173</td>\n",
       "      <td>Shattuck Ave at 55th Ave</td>\n",
       "      <td>37.84</td>\n",
       "      <td>-122.26</td>\n",
       "      <td>173</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>4.52</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      duration_sec              start_time                end_time  \\\n",
       "287            581 2017-12-31 18:10:46.556 2017-12-31 18:20:28.352   \n",
       "1751           370 2017-12-30 17:17:54.969 2017-12-30 17:24:05.481   \n",
       "3119           457 2017-12-29 18:24:08.722 2017-12-29 18:31:46.008   \n",
       "3259           613 2017-12-29 17:20:22.096 2017-12-29 17:30:35.527   \n",
       "5246           271 2017-12-28 16:48:41.310 2017-12-28 16:53:12.645   \n",
       "\n",
       "     start_station_id             start_station_name  start_station_latitude  \\\n",
       "287               274        Oregon St at Adeline St                   37.86   \n",
       "1751              207       Broadway at Coronado Ave                   37.84   \n",
       "3119              207       Broadway at Coronado Ave                   37.84   \n",
       "3259              173       Shattuck Ave at 55th Ave                   37.84   \n",
       "5246              158  Shattuck Ave at Telegraph Ave                   37.83   \n",
       "\n",
       "      start_station_longitude end_station_id          end_station_name  \\\n",
       "287                   -122.27            173  Shattuck Ave at 55th Ave   \n",
       "1751                  -122.25            173  Shattuck Ave at 55th Ave   \n",
       "3119                  -122.25            173  Shattuck Ave at 55th Ave   \n",
       "3259                  -122.26            207  Broadway at Coronado Ave   \n",
       "5246                  -122.26            173  Shattuck Ave at 55th Ave   \n",
       "\n",
       "      end_station_latitude  end_station_longitude bike_id   user_type  \\\n",
       "287                  37.84                -122.26    3050  Subscriber   \n",
       "1751                 37.84                -122.26     456  Subscriber   \n",
       "3119                 37.84                -122.26    1238  Subscriber   \n",
       "3259                 37.84                -122.25    1238  Subscriber   \n",
       "5246                 37.84                -122.26     173  Subscriber   \n",
       "\n",
       "      member_birth_year member_gender  Age  duration_mins  \n",
       "287                   0          Male    0           9.68  \n",
       "1751                  0          Male    0           6.17  \n",
       "3119                  0          Male    0           7.62  \n",
       "3259                  0          Male    0          10.22  \n",
       "5246                  0          Male    0           4.52  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_outliers_age_100.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  new dataframe\n",
    "df_valid = df_valid.append(df_outliers_age_100, sort=False, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1718_copytow = df_valid.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We corrected the age and calendar year values and now we divide the age values into age groups ، to make further bivariate or multivariate analysis more comfortable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1718_copytow['Gage'] = pd.cut(df1718_copytow.Age, [0,24,34,44,54,64,74,84,94,100], labels =['15-24', '25-34','35-44', '45-54','55-64', '65-74','75-84', '85-94','95-100'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10, 10])\n",
    "x=len(df1718_copytow)\n",
    "(df1718_copytow.Gage.value_counts()/x*100).plot.bar(color = sb.color_palette()[2]);\n",
    "plt.title(\"the Rides per Age Group\")\n",
    "plt.ylabel('the sum rides')\n",
    "plt.xlabel('the Age Group');\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### age group from 25 to 34 is the most"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Discuss the distribution(s) of your variable(s) of interest. Were there any unusual points? Did you need to perform any transformations?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "subscriber type have 85%  rides the most , the male have most rides %74 whereas female for 24% , age group from 25 to 34 the most user\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Of the features you investigated, were there any unusual distributions? Did you perform any operations on the data to tidy, adjust, or change the form of the data? If so, why did you do this?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "initially we go to go for the age rather year of birth . so including and computing this segment has been essential. Likewise, I investigated the estimations of the segment 'Age' and chose to set each an incentive over 100 years to 0. furthermore, eliminate exceptions in age rather than mean. also, we make new section 'Gage' and put it into the age esteem: start with 15 to 24 years, till 95 to long term."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " analyze which user group by age and gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df2_male = df1718_copytow[(df1718_copytow.member_gender == \"Male\")]\n",
    "df2_female = df1718_copytow[(df1718_copytow.member_gender == \"Female\")]\n",
    "x=len(df1718_copytow)\n",
    "q=len(df1718_copytow)\n",
    "plt.figure(figsize=[8, 10])\n",
    "#///////////////////////////////////////////////////////////////////////\n",
    "(df2_male.Gage.value_counts() / x*100).plot.bar(color = sb.color_palette()[2], label='Male User');\n",
    "(df2_female.Gage.value_counts() / q*100).plot.bar(color = 'orange', label='Female User');\n",
    "plt.legend(loc='upper right')\n",
    "plt.title(\"Rides per Age Group and Gender\")\n",
    "plt.ylabel('the sum Rides')\n",
    "plt.xlabel('the Age Group');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2_without_age_nan = df1718_copytow[(df1718_copytow.Age.notnull()) &((df1718_copytow.member_gender == \"Male\") |(df1718_copytow.member_gender == \"Female\"))]\n",
    "df2_without_age_nan = df1718_copytow[(df1718_copytow.Age.notnull()) &((df1718_copytow.member_gender == \"Male\") |(df1718_copytow.member_gender == \"Female\"))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA4gAAAG1CAYAAAC7y9qUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nO3de5xVdb3/8fcMFxVB8YKXQjpcQtPEaxZmejJLTNFCEUQHeYiP1H6mhhk3UfL68EaaHS26IZrXIjymPUyt5KhIZhdvKUmJoiQIKAziMMys3x8u5oiKU0fZG53n86/Za7577c/eX2B8udfM1BRFUQQAAIA2r7baAwAAALB+EIgAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQjAeuC4447L4sWLkyT7779/Hn300Xd9zrvvvjvHHHNMBgwYkC984QsZOnRo7r333nd93jf60Y9+lDFjxryn5zzhhBMybdq0JMlhhx2WpUuXrnXtsmXLMnz48LV+fvX9p02blhNOOOHfnuW73/1u7r777iTJFVdckenTp//b5wDg/aV9tQcAgPvvv/89Pd9NN92Ua665Jpdffnn69u2bJHnyySdz/PHH56qrrkq/fv3e08dbV2699dZ3/Pwrr7zyjjHd2v1bM2vWrPTp0ydJcuqpp76rcwHw/iAQAaiqsWPHJkmOPfbYTJ48OcnrgXf22Wdn8eLFOeyww/L1r389SfKb3/wmV199dRobG7Phhhtm9OjR2W233dY438qVKzNp0qT88Ic/bInDJNlhhx3yrW99K83NzUlef/ft/PPPz+zZs9PY2Jj+/fvnm9/8Ztq3b5+dd945X/nKV3L//fdnwYIFOf744zNs2LA0NjbmvPPOywMPPJAtttgiW2yxRbp06dLq+T7+8Y/nc5/7XJ588slceuml2XnnnVvmevHFFzNmzJgsWLAgH/rQh7Jo0aKWz22//faZOXNmmpqaMnr06CxZsiRJst9+++W0007L2LFj89prr+Wwww7LtGnTsssuu6zxOEcccURmzpyZJFm4cGFGjhyZBQsW5MMf/nDOPffcdOvWLXV1dTn66KMzYMCAJGm5vWjRojz22GO5+OKL065du9xzzz356Ec/mpEjR+YPf/hDLr744qxYsSIdOnTIaaedln333TfTpk3LXXfdldra2sydOzcbbrhhLrroovTu3fu9+wMDwDrlElMAqurCCy9MklxzzTXZdtttkyQbbLBBpk2blltuuSU//vGPM3/+/DzzzDP59re/ncmTJ2f69Ok599xz87WvfS2vvvrqGuebM2dOkqwRYat97nOfy6677pokueCCC7LTTjtl2rRpmT59epYsWZKf/OQnSV6PzM022yw33nhjvvOd7+TCCy9MQ0NDrr/++jzzzDO5/fbbW+Za7Z3O19jYmM9+9rO588473zLXOeeck1122SW33357zjzzzPzjH/94y9w333xzunfvnl/84hf56U9/mrlz52bZsmW58MILs+GGG+bWW29Nu3bt3vFx/vGPf+Sss87Kbbfdlr59++b8889/x305+uij8/GPfzzf/OY38/nPf77l+JIlS3LKKadk/Pjxue2223LRRRfljDPOyHPPPZckeeihhzJhwoT88pe/zC677NIS/QC8P3gHEYD1ziGHHJIk6datW7bccsssWrQof/nLX7JgwYKMGDGiZV1NTU2effbZ7LDDDi3HiqJ4y/mGDRuW5cuX57XXXku/fv1yySWX5He/+10effTR/OxnP0uSvPbaa2vc53Of+1ySZKeddsrKlSvz6quvZubMmTnkkEPSsWPHdOzYMQMHDsxTTz2VJK2eb88993zb5/rAAw9k9OjRSZKPfOQj+eQnP/mWNZ/5zGfyla98JfPnz8/ee++d008/PV26dMkrr7zylrVre5y99947H/nIR5IkRxxxRI444oi3XdeaRx55JD169Mguu+ySJPnoRz+a3XffPb///e9TU1OTnXbaKdtss02SZMcdd8xdd931f3ocAKpDIAKw3mnf/n+/PNXU1KQoijQ3N6d///65/PLLWz43f/78bLXVVmvct3fv3imKIrNnz265xPT6669PkkybNi133nlnkqS5uTlXXHFFy+WPS5cuTU1NTct5Nthgg5bHT94+PNu1a9fycWvn69Sp09s+19XP7+2e+2r9+vXLPffck5kzZ+bBBx/M4MGD84Mf/CBdu3Z9y9q1Pc6bZ33j47zx8RsbG9/2/qs1NTWt8bxW33/VqlXp0KFDNtxww7U+NwDWfy4xBaDq2rVrl1WrVr3jmv79++f+++9vuYT03nvvzaGHHvqWd+o22GCDfOMb38g3vvGNPP300y3HFy1alPvvvz+1ta9/6dtnn30yZcqUFEWRlStX5qSTTsp11133jjN85jOfyfTp09PQ0JCGhobccccdLZ/7v5xv9TlvuummJMkLL7yQWbNmvWXNpZdemquuuioHHHBAxo8fnz59+uRvf/tb2rdvn6ampn8pwmbNmpUXXnghSXLjjTdm3333TZJsvvnmeeyxx5IkTz/9dMs7osnb78uuu+6av//973nkkUeSJH/729/y0EMPZa+99mp1BgDWf95BBKDqBgwYkLq6ulx55ZVrXdOnT5+cc845GTVqVIqiSPv27XP11Vdn4403fsvaI488MltvvXXOP//8LF68OCtWrEjHjh1zwAEH5Nhjj02SjB8/Pueff34GDhyYxsbG7L333jn++OPfcc6hQ4fm2WefzSGHHJKuXbu2XLL5fz1fkpx99tkZO3ZsDjrooGyzzTZrXC672rHHHpsxY8a0XN66/fbb5+CDD067du3Sr1+/HHzwwfnpT3/6jo/Tt2/fjBs3Li+99FJ69eqVc845J0ly0kknZcyYMbn33nvTq1evNS5R3X///TNp0qQ13lXcfPPNc8UVV+Tcc8/Na6+9lpqamlx44YXp2bNn/vSnP7X6fAFYv9UUrv0AAAAgLjEFAACgJBABAABIIhABAAAoCUQAAACStNGfYvr672tqrvYYbVq7djVpavLzkarJHqwf7EP12YP1g32oPnuwfrAP1ddW9qBDh3Zve7yNBmLy8suvVnuMNq1r1072oMrswfrBPlSfPVg/2IfqswfrB/tQfW1lD7p16/K2x11iCgAAQBKBCAAAQEkgAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAECSpKYoiqLaQ1Rac3OR2tqaao8BAAB8QK1oaEz90teqPcZadevW5W2Pt6/wHOuF2tqa7HHG1GqPAQAAfEA9fMnw1Gf9DcS1cYkpAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJBEIAIAAFASiAAAACQRiAAAAJQEIgAAAEkEIgAAACWBCAAAQBKBCAAAQEkgAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJBEIAIAAFASiAAAACQRiAAAAJQEIgAAAEkEIgAAACWBCAAAQBKBCAAAQEkgAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJBEIAIAAFASiAAAACQRiAAAAJQEIgAAAEkEIgAAACWBCAAAQBKBCAAAQEkgAgAAkEQgAgAAUBKIAAAAJBGIAAAAlNaLQJw1a1a233773HHHHWscHzhwYMaMGfO295k2bVouvfTSSowHAADQJqwXgZgkvXr1yi9/+cuW20899VRWrFhRxYkAAADalvbVHmC1HXbYIc8880yWLl2aTTbZJP/93/+dgQMHZv78+bnuuuvy61//OqtWrUqXLl1y5ZVXrnHfa6+9Nr/85S9TU1OTL37xixk+fHiVngUAAMD713rzDmKSfP7zn89dd92VoijyyCOPZLfddktzc3NefvnlTJkyJddff31WrVqVRx99tOU+Tz/9dO64445cf/31uf7663P33Xfn73//exWfBQAAwPvTevMOYvL69xxOnDgx2223Xfbcc88kSW1tbTp06JBRo0alU6dO+ec//5lVq1a13Gf27Nl54YUXMmLEiCTJK6+8kmeffTa9evWqxlMAAAB431qvAnG77bbLq6++mmuvvTajRo3Kc889l/r6+tx999255ZZbsmLFigwaNChFUbTcp1evXunTp09++MMfpqamJlOmTEnfvn2r+CwAAADen9arQEySL37xi7n11lvTs2fPPPfcc2nXrl022mijDBo0KB07dky3bt2yYMGClvU77LBD+vfvn6OOOiorV65Mv379svXWW1fxGQAAALw/1RRvfDuuDdnjjKnVHgEAAPiAeviS4Vm4cFm1x1irbt26vO3x9eqH1AAAAFA9AhEAAIAkAhEAAICSQAQAACCJQAQAAKAkEAEAAEgiEAEAACgJRAAAAJIIRAAAAEoCEQAAgCQCEQAAgJJABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASgIRAACAJAIRAACAkkAEAAAgiUAEAACgJBABAABIIhABAAAoCUQAAACSCEQAAABKAhEAAIAkAhEAAICSQAQAACCJQAQAAKAkEAEAAEgiEAEAACgJRAAAAJIIRAAAAEoCEQAAgCQCEQAAgJJABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASgIRAACAJAIRAACAkkAEAAAgiUAEAACgJBABAABIIhABAAAoCUQAAACSCEQAAABKAhEAAIAkAhEAAICSQAQAACCJQAQAAKAkEAEAAEgiEAEAACgJRAAAAJIIRAAAAEoCEQAAgCQCEQAAgJJABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASq0GYlEUlZgDAACAKms1EEeOHFmJOQAAAKiy9q0t6NKlS+6+++707NkztbWv92TPnj3X+WAAAABUVquBuHjx4lxzzTUtt2tqajJ16tR1OhQAAACV12ogXnvttVm2bFmef/75bLfddtl4440rMRcAAAAV1mog3nnnnbn66qvT1NSUAQMGpKamJl/96lcrMRsAAAAVVFO08mNKhw4dmqlTp2bkyJGZOnVqDj/88EybNq1S860Tzc1Famtrqj0GAADwAbWioTH1S1+r9hhr1a1bl7c93uo7iLW1tenYsWNqampSU1OTjTba6D0frhoWLlxW7RHatK5dO+Xll1+t9hhtmj1YP9iH6rMH6wf7UH32YP1gH6qvre9Bq7/mYs8998yoUaPy4osv5qyzzsrOO+9cibkAAACosFbfQRw1alRmzJiRHXfcMb17985nP/vZSswFAABAha01EKdPn77G7S233DKvvPJKpk+fni996UvrfDAAAAAqa62BOGfOnCTJn//852y00UbZbbfd8uijj2bVqlUCEQAA4ANorYF4+umnJ0lGjhyZyZMntxw/7rjj1v1UAAAAVFyrP6Rm8eLFWbp0aZJkyZIlefnll9f5UAAAAFReqz+k5sQTT8zhhx+ezp07p76+PhdccEEl5gIAAKDCWg3EAw88MAceeGAWLVqUrl27pl27dpWYCwAAgAprNRDvv//+TJkyJQ0NDS3Hpk6duk6HAgAAoPJaDcQLL7ww48aNyzbbbFOJeQAAAKiSVgNx2223zd57712JWQAAAKiiVgNxiy22yFlnnZUdd9wxNTU1SZIhQ4as88EAAACorFYDsXv37kmSl156aZ0PAwAAQPW0Gognn3xyHnjggcybNy/9+vVLz549KzEXAAAAFdZqIE6aNCn//Oc/M2fOnHTo0CGTJ0/OpEmTKjEbAAAAFVTb2oKHH344F198cTp16pQvf/nLmTdvXiXmAgAAoMJaDcSmpqY0NDSkpqYmTU1Nqa1t9S4AAAC8D7V6iemIESMyaNCgLF68OIMHD86IESMqMBYAAACV1mogDhgwIP3798/cuXPTvXv3bL755pWYCwAAgApbayA2NjZm+vTpGTx4cM4555wsXLgwNTU1ueiii7LNNttUckYAAAAqYK3fUHjJJZdkzpw5SZIXXnghEydOzIABA/Ld7363YsMBAABQOWt9B/HJJ5/M1KlTX1/Uvn169eqVXr165fDDD6/YcAAAAFTOWt9BbG5ubvn49NNPb/m4c+fO63YiAAAAqmKtgVgURerr65Mku+66a5Kkvr4+RVFUZjIAAAAqaq2BOGzYsHzta1/Lk08+meXLl+epp57Kqaeemrq6ukrOBwAAQIWs9XsQDz744HTu3DmXXXZZ5s2blw996EM5+uijs//++1dyPgAAACrkHX8P4n777Zf99tuvUrMAAABQRWu9xBQAAIC2RSACAACQpJVLTFebOXNmnnvuufTr1y89e/bMBhtssK7nAgAAoMJaDcRJkybln//8Z+bMmZMOHTpk8uTJmTRpUiVmAwAAoIJavcT04YcfzsUXX5xOnTrly1/+cubNm1eJuQAAAKiwVgOxqakpDQ0NqampSVNTU2prfdsiAADAB1Grl5gee+yxGTRoUBYvXpzBgwdnxIgRFRgLAACASms1EA866KDsvffemTt3brbbbrtsttlmlZgLAACACms1EH/3u9/lhhtuyIoVK1qOTZ06dZ0OBQAAQOW1GohXXHFFxo4dmy233LIS81RETYp069al2mO0efag+uzB65pWvpbFrzRWewwAgKprNRA33XTT7LXXXpWYpWJqamvz7Dk7V3sMYD3R46xHkwhEAIC1BuJNN92UJOnQoUMmTJiQnXbaKTU1NUmSIUOGVGY6AAAAKmatgbhw4cIkyS677JIkeemllyozEQAAAFWx1kA8+eSTkyRXXXVVvvrVr7Ycv+yyy9b9VAAAAFTcWgPxlltuyc9+9rPMmTMnM2bMSJI0NzensbExp59+esUGBAAAoDLWGoiHHXZY+vfvn+9///s58cQTkyS1tbXZYostKjYcAAAAlbPWQOzYsWO6d++ec889t5LzAAAAUCW11R4AAACA9YNABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASgIRAACAJAIRAACAkkAEAAAgiUAEAACgJBABAABIIhABAAAoCUQAAACSCEQAAABKAhEAAIAkAhEAAICSQAQAACCJQAQAAKAkEAEAAEgiEAEAACgJRAAAAJIIRAAAAEoCEQAAgCQCEQAAgJJABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASgIRAACAJAIRAACAkkAEAAAgiUAEAACgJBABAABIIhABAAAoCUQAAACSCEQAAABKAhEAAIAkAhEAAICSQAQAACCJQAQAAKAkEAEAAEgiEAEAACgJRAAAAJIIRAAAAEoCEQAAgCQCEQAAgJJABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASgIRAACAJAIRAACAkkAEAAAgiUAEAACgJBABAABIIhABAAAoCUQAAACSCEQAAABKAhEAAIAkAhEAAIBS+3Vx0nnz5uXQQw/NTjvt1HLsk5/8ZE4++eT37DHq6uoyceLE9O7d+z07JwAAQFu2TgIxSfr06ZNrr712XZ0eAACA99g6C8S3c9lll+Whhx5KURQZMWJEDjrooNTV1WX77bfP3/72t3Tq1Cl77rln7rvvvixdujQ//vGP065du4wfPz7Lli3LkiVLMnjw4AwbNqzlnMuWLcv48eOzZMmSJMmZZ56Z7bffvpJPCwAA4ANhnQXi008/nbq6upbbgwcPzrx583LjjTemoaEhRx55ZD796U8nSfr165czzzwzI0eOzIYbbpif/OQnGT16dB566KFsu+22Ofjgg/OFL3whL774Yurq6tYIxO9973v51Kc+lWHDhuWZZ57J2LFjc8MNN6yrpwUAAPCBVbFLTH/wgx/k8ccfb4nGVatW5YUXXkiSlu9V3GSTTdKnT5+WjxsaGrLlllvmmmuuya9//et07tw5q1atWuNxZs+enQcffDC/+tWvkiRLly5dV08JAADgA61il5j26tUrn/zkJ3Puueemubk5V111Vbp3797q/X784x9n1113zbBhw/Lggw/m3nvvfct5Dz300AwcODCLFi3KLbfcsq6eAgAAwAdaxX7Nxf77759OnTpl2LBhGTRoUJKkc+fOrd7vs5/9bKZOnZqjjjoq11xzTdq1a5eVK1e2fP7EE0/Mr371q9TV1eX444/PRz/60XX2HAAAAD7IaoqiKKo9RDU8e87O1R4BWE/0OOvRLFy4rCqP3bVrp7z88qtVeWxeZw/WD/ah+uzB+sE+VF9b2YNu3bq87fGKvYMIAADA+k0gAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJBEIAIAAFASiAAAACQRiAAAAJQEIgAAAEkEIgAAACWBCAAAQBKBCAAAQEkgAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJBEIAIAAFASiAAAACQRiAAAAJQEIgAAAEkEIgAAACWBCAAAQBKBCAAAQEkgAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAEoEIAABASSACAACQRCACAABQEogAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJBEIAIAAFASiAAAACQRiAAAAJQEIgAAAEkEIgAAAKX21R6gGorm5vQ469FqjwGsJ5pWvlbtEQAA1gttMxBTk5cWLqv2GG1a166d8vLLr1Z7jDbNHgAA8GYuMQUAACCJQAQAAKAkEAEAAEgiEAEAACgJRAAAAJIIRAAAAEoCEQAAgCQCEQAAgJJABAAAIIlABAAAoCQQAQAASCIQAQAAKAlEAAAAkghEAAAASgIRAACAJAIRAACAkkAEAAAgSVJTFEVR7SEAAACoPu8gAgAAkEQgAgAAUBKIAAAAJBGIAAAAlAQiAAAASQQiAAAAJYEIAABAkjYUiM3NzTnrrLMyZMiQ1NXVZe7cudUe6X2tsbExZ5xxRoYNG5Yjjjgi99xzT+bOnZujjjoqw4YNy9lnn53m5uYkyXe/+90cccQRGTp0aB555JEkeU/W8rpFixZlv/32y5w5c+xBlXz/+9/PkCFDMmjQoNxyyy32ocIaGxtz+umnZ+jQoRk2bJi/C1Xwl7/8JXV1dUnem9fz3a5ti964B3/9618zbNiw1NXVZeTIkXnppZeSJDfffHMGDRqUI488Mr/97W+TJIsXL85xxx2XYcOG5bTTTsuKFSvek7Vt0Rv3YLXbbrstQ4YMabltD9a9N+7DokWLctJJJ+Xoo4/O0KFD8+yzzyaxD60q2og777yzGD16dFEURfGnP/2pOPHEE6s80fvbz372s+K8884riqIoFi9eXOy3337FCSecUDz44INFURTFhAkTil//+tfFY489VtTV1RXNzc3F888/XwwaNKgoiuJdr+V1K1euLL761a8WX/jCF4qnn37aHlTBgw8+WJxwwglFU1NTUV9fX3znO9+xDxV21113FaecckpRFEVx3333FSeffLI9qKDJkycXhxxySDF48OCiKN796/lerG1r3rwHRx99dPHEE08URVEUN9xwQ3HBBRcUCxYsKA455JCioaGhWLp0acvH5557bvHzn/+8KIqi+P73v1/85Cc/eU/WtjVv3oOiKIonnniiGD58eMsxe7DuvXkfRo8eXdx+++1FURTFzJkzi9/+9rf24V/QZt5BfPjhh/OZz3wmSbLrrrvmscceq/JE728DBgzIqaee2nK7Xbt2efzxx7PXXnslSfbdd9888MADefjhh7PPPvukpqYmH/rQh9LU1JTFixe/67W87qKLLsrQoUOz1VZbJYk9qIL77rsvffv2zf/7f/8vJ554Yv7zP//TPlRYz54909TUlObm5tTX16d9+/b2oIJ69OiRK6+8suV2JV/7ta1ta968B5MmTcrHPvaxJElTU1M22GCDPPLII9ltt93SsWPHdOnSJT169MiTTz65xn8frX5d34u1bc2b92DJkiW59NJLM27cuJZj9mDde/M+/PGPf8yLL76YESNG5Lbbbstee+1lH/4FbSYQ6+vr07lz55bb7dq1y6pVq6o40fvbxhtvnM6dO6e+vj6nnHJKTjvttBRFkZqampbPL1u27C2v++rj73YtybRp07L55pu3/AOVxB5UwZIlS/LYY4/liiuuyLe+9a184xvfsA8V1qlTpzz//PM56KCDMmHChNTV1dmDCjrwwAPTvn37ltuVfO3XtratefMerP6fhn/84x9z3XXXZcSIEamvr0+XLl1a1my88capr69f4/gbX9d3u7ateeMeNDU1Zfz48Rk3blw23njjljX2YN1789+F559/PptsskmmTJmSbbfdNj/4wQ/sw7+gzQRi586ds3z58pbbzc3Na/wB4t83f/78DB8+PIcddlgGDhyY2tr//eO0fPnybLLJJm953ZcvX54uXbq867UkP//5z/PAAw+krq4uf/3rXzN69Og1/s+5PaiMrl27Zp999knHjh3Tq1evbLDBBmv8B6p9WPemTJmSffbZJ3feeWduvfXWjBkzJo2NjS2ftweVVcmvBWtbS3LHHXfk7LPPzuTJk7P55puv9bV64/HWXtd/Z21b9vjjj2fu3LmZOHFiRo0alaeffjrnn3++PaiCrl27Zv/99/ZfxHMAAAZfSURBVE+S7L///nnsscfsw7+gzQTi7rvvnhkzZiRJ/vznP6dv375Vnuj97aWXXspxxx2XM844I0cccUSSZMcdd8ysWbOSJDNmzMiee+6Z3XffPffdd1+am5vzwgsvpLm5OZtvvvm7Xkvy05/+NNddd12uvfbafOxjH8tFF12Ufffd1x5U2B577JH/+Z//SVEUefHFF7NixYr079/fPlTQJpts0vJFeNNNN82qVav8e1RFlXzt17a2rbv11ltbvj5st912SZJ+/frl4YcfTkNDQ5YtW5Y5c+akb9++2X333XPvvfcmef113WOPPd6TtW1Zv379cvvtt+faa6/NpEmT0qdPn4wfP94eVMEee+zR8no99NBD6dOnj334F9QURVFUe4hKaG5uzsSJEzN79uwURZELLrggvXv3rvZY71vnnXdefvWrX6VXr14tx8aPH5/zzjsvjY2N6dWrV84777y0a9cuV155ZWbMmJHm5uaMHTs2e+65Z/7xj39kwoQJ72ot/6uuri4TJ05MbW3tu35d7cG/7+KLL86sWbNSFEW+/vWvp3v37vahgpYvX55x48Zl4cKFaWxszPDhw/Pxj3/cHlTQvHnzMmrUqNx8883vyev5bte2Rav34IYbbkj//v2z7bbbtrzD/YlPfCKnnHJKbr755tx0000piiInnHBCDjzwwLz00ksZPXp0li9fns022yyXXXZZOnXq9K7XtkVv/HuwtmP2YN1742v+/PPP58wzz8yKFSvSuXPnXHbZZdl0003tQyvaTCACAADwztrMJaYAAAC8M4EIAABAEoEIAABASSACAACQRCACAABQEogA8B54+eWXc9ttt/3L67/5zW/myCOPzJw5c9bhVADw7xGIAPAeeOqpp/Kb3/zmX15/33335eabb/Y7eQFYrwhEANqU1157LV//+tczZMiQDBo0KH/605/S2NiYM844I0OHDs3gwYNzxx13JEnq6upa3uG74YYbcuWVV2bevHkZMmRITj311AwaNChnn312kuR73/teHnzwwdx0001rPN7999+fwYMH55hjjsnJJ5+cpUuXZuLEiVm6dGlOOumkNdaOGTMmM2bMSJLMmDEjY8aMaTk+bNiwHH744S2z/f73v89RRx2VY445JmPHjk1jY2OmTZuWo48+OkcddVRmzpz5tvcDgHfSvtoDAEAl3Xjjjfnwhz+cb3/725k9e3YeeOCBPP7449lss81yySWXpL6+PoMGDcqnPvWptZ7jmWeeyY9+9KNstNFGOeCAA7Jw4cKceOKJufHGGzNkyJCWdUVRZMKECbnhhhuy9dZb55prrsnVV1+diRMn5q677srVV1/d6rz19fWZNWtWfv7znyd5PThXn/f666/PFltskcsvvzy/+MUv0r59+2yyySa5+uqrU19fn3Hjxq1xPwBojUAEoE35+9//nn333TdJ0rdv3/Tt2zff+ta3svfeeydJOnfunN69e+e5555b435FUbR83KNHj3Tu3DlJ0q1btzQ0NLztYy1ZsiSdO3fO1ltvnST5xCc+kUmTJv1Lc65+vM6dO2fChAmZMGFC6uvrc+ihh2bx4sVZsGBBTjvttCSvvyv66U9/Oj169EjPnj3Xej8AaI1ABKBN6d27dx599NEccMABee6553L55Zdnt912yx/+8Id8/vOfT319fWbPnp3u3bunY8eOWbhwYXr37p0nnniiJfRqamrect7a2to0NzevcWyzzTZLfX19FixYkK222iq///3v8x//8R9rnW314yXJE088kSRZsGBBHn/88fzXf/1XGhoast9++2XgwIHZZpttctVVV6VLly6555570qlTp8yfPz+1tbVrvd9hhx2W9u196Qdg7XyVAKBNGTp0aMaNG5djjjkmTU1NGTduXLbffvtMmDAhRx11VBoaGnLyySdniy22yPDhw3POOedk2223zVZbbfWO5+3Ro0dmz56dKVOmZMSIEUleD8nzzjsvX/va11JTU5NNN900F1544VrPMXjw4IwbNy633XZbS0h269YtCxcuzJe+9KV06tQpxx13XDp27Jjx48fnK1/5SoqiyMYbb5yLL7448+fPbznX291PHALQmprijdfMAAAA0Gb5KaYAAAAkEYgAAACUBCIAAABJBCIAAAAlgQgAAEASgQgAAEBJIAIAAJAk+f+waRuK88JclAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[15, 7])\n",
    "sb.countplot(data = df2_without_age_nan, y = 'member_gender')\n",
    "plt.title('the Gender distribution')\n",
    "plt.xlabel('count of users ')\n",
    "plt.ylabel('the Gender');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[10, 10])\n",
    "sb.violinplot(data = df2_without_age_nan, x = 'member_gender', y = 'Age', color = sb.color_palette()[9])\n",
    "plt.title(\"Distribution of Rides and Age per Gender\", fontsize=16)\n",
    "plt.ylabel(\"the Age\")\n",
    "plt.xlabel(\"the Gender\")\n",
    "plt.ylim([0,100]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "the male have higher ages , A group of female groups, dense at the age of 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[15, 6])\n",
    "df2_customer = df1718_copytow[(df1718_copytow.user_type == \"Customer\")]\n",
    "plt.subplot(2, 1, 1)\n",
    "sb.violinplot(x='duration_mins', data = df2_customer, color = sb.color_palette()[9], label =\"Customer\")\n",
    "plt.title(\"Distribution of Ride Duration per Customer\")\n",
    "plt.xlabel(\"the min\")\n",
    "plt.ylabel(\"the Customer\")\n",
    "plt.xlim(0,60);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=[15, 6])\n",
    "df2_subscriber = df1718_copytow[(df1718_copytow.user_type == \"Subscriber\")]\n",
    "plt.subplot(2, 1, 1)\n",
    "sb.violinplot(x='duration_mins', data = df2_customer, color = sb.color_palette()[9], label =\"Subscriber\")\n",
    "plt.title(\"Distribution of Ride Duration per Subscriber\")\n",
    "plt.xlabel(\"the min\")\n",
    "plt.ylabel(\"the Subscriber\")\n",
    "plt.xlim(0,60);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "Sno_outliers = df2_subscriber[(df2_subscriber.duration_sec <= 14400)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2139\n"
     ]
    }
   ],
   "source": [
    "# remove outlying\n",
    "print(str(len(df2_subscriber) - len(Sno_outliers)) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Talk about some of the relationships you observed in this part of the investigation. How did the feature(s) of interest vary with other features in the dataset?\n",
    "\n",
    "\n",
    "generally younger than male users "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Did you observe any interesting relationships between the other features (not the main feature(s) of interest)?\n",
    "\n",
    " the subscribers have shorter trips than regular customers."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this step we will explore how it differs number of rides and the duration differs number of subscribers of gender and age group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# male & female \n",
    "Skeep_male_female = Sno_outliers[(Sno_outliers.member_gender != \"Other\")]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male      1467829\n",
       "Female     457350\n",
       "Name: member_gender, dtype: int64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Skeep_male_female.member_gender.value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>member_gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gage</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15-24</th>\n",
       "      <td>50555</td>\n",
       "      <td>157537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95-100</th>\n",
       "      <td>0</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45-54</th>\n",
       "      <td>44085</td>\n",
       "      <td>191880</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "member_gender  Female    Male\n",
       "Gage                         \n",
       "15-24           50555  157537\n",
       "95-100              0      88\n",
       "45-54           44085  191880"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Srides= Skeep_male_female.groupby(['member_gender', 'Gage']).size()\n",
    "Srides = Srides.reset_index(name = 'count')\n",
    "Srides = Srides.pivot(index = 'Gage', columns = 'member_gender', values = 'count')\n",
    "Srides.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>member_gender</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gage</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>55-64</th>\n",
       "      <td>17512649.00</td>\n",
       "      <td>54315721.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95-100</th>\n",
       "      <td>nan</td>\n",
       "      <td>48124.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75-84</th>\n",
       "      <td>193439.00</td>\n",
       "      <td>1184833.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "member_gender      Female        Male\n",
       "Gage                                 \n",
       "55-64         17512649.00 54315721.00\n",
       "95-100                nan    48124.00\n",
       "75-84           193439.00  1184833.00"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sduration = Skeep_male_female.groupby(['member_gender', 'Gage'])['duration_sec'].agg('sum')\n",
    "Sduration = Sduration \n",
    "Sduration = Sduration.reset_index(name = 'duration_min')\n",
    "Sduration = Sduration.pivot(index = 'Gage', columns = 'member_gender', values = 'duration_min')\n",
    "Sduration.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [15, 15])\n",
    "plt.subplot(2, 2, 1)\n",
    "sb.heatmap(Srides/1000, annot = True, fmt =  '.0f',  cmap = 'PuRd')\n",
    "plt.title(\"count of Rides per Gender and Age Group\")\n",
    "plt.ylabel(\"The Age Group\")\n",
    "plt.xlabel(\"The Gender\")\n",
    "plt.yticks(rotation=360);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [15, 15])\n",
    "plt.subplot(2, 2, 2)\n",
    "sb.heatmap(Sduration/60/60/1000, annot = True, fmt =  '.2f',  cmap = 'PuRd', yticklabels=False)\n",
    "plt.title(\"Sum of all Rides Duration per Gender and Age Group \")\n",
    "plt.ylabel(\"the Age Group\")\n",
    "plt.xlabel(\"the Gender\");\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "SDS = Sduration / Srides"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = [15, 15])\n",
    "plt.subplot(2, 2, 3)\n",
    "sb.heatmap(SDS/60, annot = True, fmt =  '.2f',  cmap = 'PuRd');\n",
    "plt.title(\"Average Ride Duration per Gender and Age Group \")\n",
    "plt.ylabel(\"the Age Group\")\n",
    "plt.xlabel(\"the Gender\")\n",
    "plt.yticks(rotation=360);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Talk about some of the relationships you observed in this part of the investigation. Were there features that strengthened each other in terms of looking at your feature(s) of interest?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I saw that the use in terms of number of rides and the duration do not diverge a lot number of gender and age group . That implies, the group with most rides additionally has the most noteworthyride duration.\n",
    "\n",
    "\n",
    "I will discuss the initial two heatmaps show, which sub segments are utilizing FordGoBike widely and which are definitely not. the hazier the colorization, the more significant the fragment and the lighter the colorizationt the less important the segment\n",
    "\n",
    "\n",
    "if we see heatmaps, we can ident  which segment can be marketed.\n",
    "\n",
    "\n",
    "the old we have group from 45 to 54 years , dont uesing blkes a lot\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Were there any interesting or surprising interactions between features?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "About The third heatmap. The distance trip for females is greater than meals. also,Old users spend more time than younger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df1718_copytow.to_csv(\"fordgobike_explain.csv\", header=True, index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
